generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")  
}

model Driver {
  id       String    @id @default(uuid())
  name     String    @unique
  cars     Car[]
  sessions Session[]
  sessionRequests SessionRequest[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Car {
  id        String    @id @default(uuid())
  name      String
  driver    Driver    @relation(fields: [driverId], references: [id])
  driverId  String
  defaultCarNumber Int?
  sessions  Session[]
  sessionRequests SessionRequest[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  @@unique([driverId, name])
}

model Session {
  id            String    @id
  date          DateTime
  driver        Driver    @relation(fields: [driverId], references: [id])
  driverId      String
  car           Car       @relation(fields: [carId], references: [id])
  carId         String
  location      Location  @relation(fields: [locationId], references: [id])  
  locationId    String                                                       
  driverName    String
  carName       String
  locationName  String
  totalTime     Int
  totalLaps     Int
  notes         String?   @db.Text
  laps          Lap[]
  penalties     Penalty[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([driverId])
  @@index([carId])
  @@index([locationId])  // Add this index
}

model Lap {
  id        String   @id @default(uuid())
  session   Session  @relation(fields: [sessionId], references: [id])
  sessionId String
  lapNumber Int
  lapTime   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sessionId])
}

model Penalty {
  id        String   @id @default(uuid())
  session   Session  @relation(fields: [sessionId], references: [id])
  sessionId String
  lapNumber Int
  count     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MotionSettings {
  id          String    @id @default(uuid())
  name        String    @unique
  sensitivity Int
  threshold   Float
  cooldown    Int
  framesToSkip Int      @default(10)  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Location {
  id        String    @id @default(uuid())
  name      String    @unique
  sessions  Session[]
   sessionRequests SessionRequest[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model SessionRequest {
  id            String   @id @default(uuid())
  driver        Driver   @relation(fields: [driverId], references: [id])
  driverId      String
  car           Car      @relation(fields: [carId], references: [id])
  carId         String
  location      Location @relation(fields: [locationId], references: [id])
  locationId    String
  numberOfLaps  Int
  status        SessionRequestStatus @default(PENDING)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([driverId])
  @@index([carId])
  @@index([locationId])
  @@index([status])
}

enum SessionRequestStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

model CurrentSession {
  id           String           @id @default(uuid())
  driverName   String
  carName      String
  locationName String
  lapCount     Int             @default(0)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  laps         CurrentLap[]    // Relation to laps
}

model CurrentLap {
  id         String        @id @default(uuid())
  session    CurrentSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId  String
  lapTime    Int
  lapNumber  Int
  penaltyCount Int         @default(0)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@index([sessionId])
}